from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import asyncio
from datetime import datetime

TOKEN = "8040321172:AAEju1J_mm3J_TLIIY3SZKYvVbjbOTUrOTo"
ADMIN_CHAT_ID = "-4686601366"  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -100)
ADMIN_LINK = "https://t.me/midav0101"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
UZBEKISTAN_CITIES = [
    "–¢–∞—à–∫–µ–Ω—Ç",
    "–°–∞–º–∞—Ä–∫–∞–Ω–¥",
    "–ë—É—Ö–∞—Ä–∞",
    "–ù–∞–º–∞–Ω–≥–∞–Ω",
    "–ê–Ω–¥–∏–∂–∞–Ω",
    "–§–µ—Ä–≥–∞–Ω–∞",
    "–ö–∞—Ä—à–∏",
    "–ù—É–∫—É—Å",
    "–£—Ä–≥–µ–Ω—á",
    "–ì—É–ª–∏—Å—Ç–∞–Ω",
    "–î–∂–∏–∑–∞–∫",
    "–¢–µ—Ä–º–µ–∑"
]

# –†–∞–π–æ–Ω—ã –¢–∞—à–∫–µ–Ω—Ç–∞
TASHKENT_DISTRICTS = [
    "–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π",
    "–ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–∏–π",
    "–Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π",
    "–®–∞–π—Ö–∞–Ω—Ç–∞—Ö—É—Ä—Å–∫–∏–π",
    "–Ø—à–Ω–∞–±–∞–¥—Å–∫–∏–π",
    "–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π",
    "–ë–µ–∫—Ç–µ–º–∏—Ä—Å–∫–∏–π",
    "–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π",
    "–ê–ª–º–∞–∑–∞—Ä—Å–∫–∏–π",
    "–£—á—Ç–µ–ø–∏–Ω—Å–∫–∏–π"
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
def get_db():
    conn = sqlite3.connect('kifkif.db')
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = get_db()
    cursor = conn.cursor()

    cursor.execute("DROP TABLE IF EXISTS cart")  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        city TEXT,
        district TEXT,
        orders_count INTEGER DEFAULT 0
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS products (
        product_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        price REAL
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS cart (
        cart_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        product_id INTEGER,
        product_name TEXT,
        price REAL,
        quantity INTEGER,
        FOREIGN KEY (user_id) REFERENCES users (user_id),
        FOREIGN KEY (product_id) REFERENCES products (product_id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        products TEXT,
        total REAL,
        date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
   # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    products = [
        ("iPhone 15 Pro", 999.99),
        ("Samsung Galaxy S23", 899.99),
        ("Xiaomi 13T Pro", 799.99),
        ("MacBook Air M2", 1299.99),
        ("iPad Pro 12.9", 1099.99),
        ("Apple Watch Series 9", 399.99),
        ("AirPods Pro 2", 249.99),
        ("PlayStation 5", 499.99),
        ("Xbox Series X", 499.99),
        ("Nintendo Switch OLED", 349.99),
        ("DJI Mini 3 Pro", 759.99),
        ("GoPro Hero 11", 399.99),
        ("Sony WH-1000XM5", 399.99),
        ("Bose QuietComfort 45", 329.99),
        ("LG OLED C3", 1499.99)
    ]
    
    cursor.execute("SELECT COUNT(*) FROM products")
    if cursor.fetchone()[0] == 0:
        cursor.executemany("INSERT INTO products (name, price) VALUES (?, ?)", products)
    
    conn.commit()
    conn.close()
    
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–í–∏—Ç—Ä–∏–Ω–∞")],
            [KeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")]
        ],
        resize_keyboard=True
    )

# /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    conn.close()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–¢–∞—à–∫–µ–Ω—Ç"), KeyboardButton(text="–°–∞–º–∞—Ä–∫–∞–Ω–¥")],
        [KeyboardButton(text="–ë—É—Ö–∞—Ä–∞"), KeyboardButton(text="–ù–∞–º–∞–Ω–≥–∞–Ω")],
        [KeyboardButton(text="–ê–Ω–¥–∏–∂–∞–Ω"), KeyboardButton(text="–§–µ—Ä–≥–∞–Ω–∞")],
        [KeyboardButton(text="–ö–∞—Ä—à–∏"), KeyboardButton(text="–ù—É–∫—É—Å")],
        [KeyboardButton(text="–£—Ä–≥–µ–Ω—á"), KeyboardButton(text="–ì—É–ª–∏—Å—Ç–∞–Ω")],
        [KeyboardButton(text="–î–∂–∏–∑–∞–∫"), KeyboardButton(text="–¢–µ—Ä–º–µ–∑")]
    ])

    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(F.text.in_(UZBEKISTAN_CITIES))
async def process_city(message: types.Message):
    user_id = message.from_user.id
    city = message.text

    conn = get_db()
    cursor = conn.cursor()
    
    if city == "–¢–∞—à–∫–µ–Ω—Ç":
        # –î–ª—è –¢–∞—à–∫–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–π–æ–Ω—ã
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [KeyboardButton(text="–ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π"), KeyboardButton(text="–ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–∏–π")],
            [KeyboardButton(text="–Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π"), KeyboardButton(text="–®–∞–π—Ö–∞–Ω—Ç–∞—Ö—É—Ä—Å–∫–∏–π")],
            [KeyboardButton(text="–Ø—à–Ω–∞–±–∞–¥—Å–∫–∏–π"), KeyboardButton(text="–Ø–∫–∫–∞—Å–∞—Ä–∞–π—Å–∫–∏–π")],
            [KeyboardButton(text="–ë–µ–∫—Ç–µ–º–∏—Ä—Å–∫–∏–π"), KeyboardButton(text="–°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π")],
            [KeyboardButton(text="–ê–ª–º–∞–∑–∞—Ä—Å–∫–∏–π"), KeyboardButton(text="–£—á—Ç–µ–ø–∏–Ω—Å–∫–∏–π")]
        ])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω –≤ –¢–∞—à–∫–µ–Ω—Ç–µ:",
            reply_markup=keyboard
        )
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        cursor.execute("UPDATE users SET city=?, district=NULL WHERE user_id=?", (city, user_id))
        conn.commit()
        await message.answer(
            f"üìç –í–∞—à –≥–æ—Ä–æ–¥: {city}",
            reply_markup=get_main_menu()
        )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¢–∞—à–∫–µ–Ω—Ç–∞)
@dp.message(F.text.in_(TASHKENT_DISTRICTS))
async def process_district(message: types.Message):
    user_id = message.from_user.id
    district = message.text

    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET city=?, district=? WHERE user_id=?", 
        ("–¢–∞—à–∫–µ–Ω—Ç", district, user_id)
    )
    conn.commit()
    conn.close()

    await message.answer(
        f"üìç –í–∞—à —Ä–∞–π–æ–Ω: {district}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã!",
        reply_markup=get_main_menu()
    )

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url=ADMIN_LINK)]
    ])
    await message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ –∞–¥–º–∏–Ω—É:\n"
        "@midav0101\n\n"
        "–†–∞–±–æ—Ç–∞–µ–º 10:00-22:00",
        reply_markup=kb
    )

# –ü—Ä–∞–≤–∏–ª–∞
@dp.message(F.text == "–ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: types.Message):
    await message.answer(
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:\n\n"
        "1. –û–ø–ª–∞—Ç–∞ - –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞\n"
        "2. –î–æ—Å—Ç–∞–≤–∫–∞ 1-3 –¥–Ω—è\n"
        "3. –ì–∞—Ä–∞–Ω—Ç–∏—è 14 –¥–Ω–µ–π\n"
        "4. –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –±—Ä–∞–∫–µ\n\n"
        "–í—Å–µ —á–µ—Ç–∫–æ –∏ –±–µ–∑ –æ–±–º–∞–Ω–∞!"
    )

# –í–∏—Ç—Ä–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message(F.text == "–í–∏—Ç—Ä–∏–Ω–∞")
async def show_products(message: types.Message):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT product_id, name, price FROM products")
    products = cursor.fetchall()
    conn.close()

    if not products:
        await message.answer("üõí –í–∏—Ç—Ä–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for product_id, name, price in products:
        kb.inline_keyboard.append(
            [InlineKeyboardButton(
                text=f"{name} - {price} —Å—É–º",
                callback_data=f"add_{product_id}"
            )]
        )
    
    kb.inline_keyboard.append(
        [InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data="close_products"
        )]
    )

    await message.answer(
        "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("add_"))
async def add_product_handler(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT name, price FROM products WHERE product_id=?", (product_id,))
    product = cursor.fetchone()
    conn.close()
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    product_name, price = product
    
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}"
    )
    await callback.answer()

    # –ñ–¥–µ–º –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    @dp.message(F.from_user.id == callback.from_user.id)
    async def process_quantity(message: types.Message):
        try:
            quantity = int(message.text)
            if quantity <= 0:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0!")
                return
            
            conn = get_db()
            cursor = conn.cursor()
            cursor.execute(
                '''INSERT INTO cart 
                (user_id, product_id, product_name, price, quantity) 
                VALUES (?, ?, ?, ?, ?)''',
                (callback.from_user.id, product_id, product_name, price, quantity)
            )
            conn.commit()
            conn.close()
            
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        dp.message_handlers.unregister(process_quantity)

# –ü—Ä–æ—Ñ–∏–ª—å
@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("SELECT username, city, district, orders_count FROM users WHERE user_id=?", (user_id,))
    data = cursor.fetchone()
    conn.close()

    username = data[0] if data else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    city = data[1] if data else "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    district = data[2] if data and data[2] else "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    orders = data[3] if data else 0

    await message.answer(
        f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üìõ –ù–∏–∫: @{username}\n"
        f"üìç –ì–æ—Ä–æ–¥: {city}\n"
        f"üè† –†–∞–π–æ–Ω: {district}\n"
        f"üõç –ó–∞–∫–∞–∑–æ–≤: {orders}\n"
        f"üÜî –¢–≤–æ–π ID: {user_id}"
    )

# –ö–æ—Ä–∑–∏–Ω–∞
@dp.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
    SELECT product_name, price, quantity 
    FROM cart 
    WHERE user_id = ?
    ''', (user_id,))
    
    items = cursor.fetchall()
    conn.close()
    
    if not items:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for name, price, quantity in items:
        item_sum = price * quantity
        cart_text += f"{name} x{quantity} = {item_sum:,} —Å—É–º\n"
        total += item_sum
    
    cart_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total:,} —Å—É–º"
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(cart_text, reply_markup=keyboard)

# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@dp.message(F.text == "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=get_main_menu())

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message(F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout(message: types.Message):
    user_id = message.from_user.id
    
    conn = get_db()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
    cursor.execute('''
    SELECT product_name, price, quantity 
    FROM cart 
    WHERE user_id = ?
    ''', (user_id,))
    
    items = cursor.fetchall()
    
    if not items:
        await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        conn.close()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    total = 0
    order_text = "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
    order_text += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω
    cursor.execute("SELECT city, district FROM users WHERE user_id=?", (user_id,))
    city_data = cursor.fetchone()
    city = city_data[0] if city_data else "–ù–µ —É–∫–∞–∑–∞–Ω"
    district = city_data[1] if city_data and city_data[1] else ""
    
    if district:
        order_text += f"üìç –ì–æ—Ä–æ–¥: {city}, —Ä–∞–π–æ–Ω: {district}\n"
    else:
        order_text += f"üìç –ì–æ—Ä–æ–¥: {city}\n"
    
    order_text += "\nüõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    
    for name, price, quantity in items:
        item_sum = price * quantity
        order_text += f"- {name} x{quantity} = {item_sum:,} —Å—É–º\n"
        total += item_sum
    
    order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total:,} —Å—É–º\n"
    order_text += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    cursor.execute(
        "INSERT INTO orders (user_id, products, total, date) VALUES (?, ?, ?, ?)",
        (user_id, order_text, total, datetime.now().strftime('%d.%m.%Y %H:%M')))
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute("UPDATE users SET orders_count = orders_count + 1 WHERE user_id = ?", (user_id,))
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "üöÄ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏.",
        reply_markup=get_main_menu()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    try:
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=order_text
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())